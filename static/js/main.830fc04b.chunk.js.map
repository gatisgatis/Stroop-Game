{"version":3,"sources":["components/settings/settings.tsx","typesAndData.tsx","App.tsx","components/highscores/highscores.tsx","components/instructions/instructions.tsx","components/end-pop-up/end-pop-up.tsx","logo.png","reportWebVitals.ts","index.tsx"],"names":["defaultConfigs","delay","colorCount","gamemode","roundCount","language","dificulty","sound","ALL_COLORS","ALL_WORDS","ALL_KEYS","defaultGameData","color","word","SELECT_ROUND_COUNT","i","push","SELECT_DELAY","SELECT_COLOR_COUNT","newestScore","Settingz","onSubmit","cancelClick","nowValues","useState","formValues","setFormValues","className","action","event","htmlFor","name","id","value","onChange","parseInt","target","map","num","toString","uuid","parseFloat","toFixed","disabled","type","onClick","HighScores","scores","score","index","substring","result","Instructions","EndPopUp","saveClick","keysOrBtns","inputValue","setInputValue","placeholder","autoFocus","e","gameData","buttonInfo","roundCounter","pressedKeysOrBtns","pressedKeyOrBtn","finalResult","helper","highScores","localStorage","getItem","JSON","parse","activeTimeOut","defaultSections","highScoresTablo","settingsWindow","introGifwindow","endGameResults","instructionsWindow","preGameAnimation","beep","Audio","App","configs","setConfigs","wordToShow","setWordToShow","gameSection","setGameSection","gameStage","setGameStage","useEffect","document","body","addEventListener","key","removeEventListener","wordSelector","Math","floor","random","length","colorSelector","play","setTimeout","calculateGameResult","playersColors","indexOf","round","filter","src","logo","alt","values","preventDefault","sort","prev","next","setItem","clearTimeout","style","animationDuration","animationIterationCount","slice","backgroundColor","toUpperCase","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"8PAOA,I,gFCGaA,G,YAA0B,CACrCC,MAAO,EACPC,WAAY,EACZC,SAAU,UACVC,WAAY,GACZC,SAAU,KACVC,UAAW,OACXC,MAAO,QAGIC,EAAa,CACxB,MACA,OACA,QACA,SACA,SACA,OACA,QACA,SACA,QACA,QAGWC,EAAS,UAAOD,GAEhBE,EAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAOzDC,EAAkB,CAC7BC,MAAO,GACPC,KAAM,IDtCKC,EAA+B,GACnCC,EAAI,EAAGA,EAAI,IAAKA,IACvBD,EAAmBE,KAAKD,GAI1B,IADO,IAAME,EAAyB,GAC7BF,EAAI,EAAGA,EAAI,GAAIA,IACtBE,EAAaD,KAAKD,EAAI,GAIxB,IADO,IAAMG,EAA+B,GACnCH,EAAI,EAAGA,EAAI,GAAIA,IACtBG,EAAmBF,KAAKD,GAS1B,IEiBII,EFkKWC,EAnLa,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,UAAgB,EAChCC,mBAAkBD,GADc,mBAC7DE,EAD6D,KACjDC,EADiD,KAGpE,OACE,sBAAKC,UAAU,mBAAf,UACE,qBAAKA,UAAU,kBAAf,sBACA,uBACEC,OAAO,SACPP,SAAU,SAACQ,GAAD,OAAWR,EAASQ,EAAOJ,IACrCE,UAAU,iBAHZ,UAKE,wBAAOG,QAAQ,cAAcH,UAAU,kBAAvC,yBAEE,wBACEA,UAAU,mBACVI,KAAK,cACLC,GAAG,cACHC,MAAOR,EAAWrB,WAClB8B,SAAU,SAACL,GAAD,OACRH,EAAc,2BACTD,GADQ,IAEXrB,WAAY+B,SAASN,EAAMO,OAAOH,MAAO,QAR/C,SAYGnB,EAAmBuB,KAAI,SAACC,GACvB,OACE,wBAAqBL,MAAOK,EAAIC,WAAhC,SACGD,GADUE,uBAOrB,wBAAOV,QAAQ,cAAcH,UAAU,kBAAvC,yBAEE,wBACEA,UAAU,mBACVI,KAAK,cACLC,GAAG,cACHC,MAAOR,EAAWvB,WAClBgC,SAAU,SAACL,GAAD,OACRH,EAAc,2BACTD,GADQ,IAEXvB,WAAYiC,SAASN,EAAMO,OAAOH,MAAO,QAR/C,SAYGf,EAAmBmB,KAAI,SAACC,GACvB,OACE,wBAAqBL,MAAOK,EAAIC,WAAhC,SACGD,GADUE,uBAOrB,wBAAOV,QAAQ,QAAQH,UAAU,kBAAjC,mBAEE,wBACEA,UAAU,mBACVI,KAAK,QACLC,GAAG,QACHC,MAAOR,EAAWxB,MAClBiC,SAAU,SAACL,GAAD,OACRH,EAAc,2BACTD,GADQ,IAEXxB,MAAOwC,WAAWZ,EAAMO,OAAOH,WARrC,SAYGhB,EAAaoB,KAAI,SAACC,GACjB,OACE,yBAAqBL,MAAOK,EAAIC,WAAhC,UACGD,EAAII,QAAQ,GADf,OAAaF,uBAOrB,wBAAOV,QAAQ,WAAWH,UAAU,kBAApC,uBAEE,yBACEA,UAAU,mBACVI,KAAK,WACLC,GAAG,WACHC,MAAOR,EAAWtB,SAClB+B,SAAU,SAACL,GAAD,OACRH,EAAc,2BACTD,GADQ,IAGXtB,SAAU0B,EAAMO,OAAOH,UAT7B,UAaE,wBAAQA,MAAM,UAAd,qBACA,wBAAQA,MAAM,WAAd,4BAGJ,wBAAOH,QAAQ,OAAOH,UAAU,kBAAhC,sBAEE,yBACEgB,UAAQ,EACRhB,UAAU,mBACVI,KAAK,OACLC,GAAG,OACHC,MAAOR,EAAWpB,SAClB6B,SAAU,SAACL,GAAD,OACRH,EAAc,2BACTD,GADQ,IAGXpB,SAAUwB,EAAMO,OAAOH,UAV7B,UAcE,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,sBAGJ,wBAAOH,QAAQ,MAAMH,UAAU,kBAA/B,uBAEE,yBACEA,UAAU,mBACVI,KAAK,MACLC,GAAG,MACHC,MAAOR,EAAWnB,UAClB4B,SAAU,SAACL,GAAD,OACRH,EAAc,2BACTD,GADQ,IAGXnB,UAAWuB,EAAMO,OAAOH,UAT9B,UAaE,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,wBAGJ,wBAAOH,QAAQ,QAAQH,UAAU,kBAAjC,mBAEE,yBACEA,UAAU,mBACVI,KAAK,QACLC,GAAG,QACHC,MAAOR,EAAWlB,MAClB2B,SAAU,SAACL,GAAD,OACRH,EAAc,2BACTD,GADQ,IAGXlB,MAAOsB,EAAMO,OAAOH,UAT1B,UAaE,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,MAAd,uBAGJ,wBAAQW,KAAK,SAASjB,UAAU,mBAAhC,gBAGA,wBACEiB,KAAK,SACLC,QAASvB,EACTK,UAAU,mBAHZ,eAOA,wBACEiB,KAAK,SACLC,QAAS,kBAAMnB,EAAc1B,IAC7B2B,UAAU,mBAHZ,qCGnLKmB,G,MAAwB,SAAC,GAA0C,IAAxCxB,EAAuC,EAAvCA,YAAayB,EAA0B,EAA1BA,OAAQ5B,EAAkB,EAAlBA,YAC3D,OACE,sBAAKQ,UAAU,qBAAf,UACE,qBAAKA,UAAU,oBAAf,0BACA,qBAAKA,UAAU,yBAAf,+BACA,wBACEiB,KAAK,SACLC,QAASvB,EACTK,UAAU,qBAHZ,eAOCoB,EAAOV,KAAI,SAACW,EAAOC,GAClB,OAAIA,EAAQ,GAER,sBAEEtB,UAAS,0BACPqB,IAAU7B,GAAe,cAH7B,UAMG8B,EAAQ,EANX,KAMgBD,EAAMjB,KAAKmB,UAAU,EAAG,IAAK,KAC1B,IAAfF,EAAMG,QAAcT,QAAQ,GAPhC,MACOF,eAUJ,uBAAUA,uBClCZY,G,MAA0B,SAAC,GAAqB,IAAnB9B,EAAkB,EAAlBA,YACxC,OACE,sBAAKK,UAAU,uBAAf,UACE,qBAAKA,UAAU,eAAf,0BACA,qBAAKA,UAAU,cAAf,kFACA,wBAAQiB,KAAK,SAASC,QAASvB,EAAaK,UAAU,uBAAtD,oBCEO0B,G,MAAsB,SAAC,GAQ7B,IAPL/B,EAOI,EAPJA,YACAgC,EAMI,EANJA,UACAH,EAKI,EALJA,OACAI,EAII,EAJJA,WACAnD,EAGI,EAHJA,WACAE,EAEI,EAFJA,UACAJ,EACI,EADJA,WACI,EACgCsB,mBAAS,IADzC,mBACGgC,EADH,KACeC,EADf,KAEJ,OACE,sBAAK9B,UAAU,qBAAf,UACE,wBACEiB,KAAK,SACLC,QAASvB,EACTK,UAAU,qBAHZ,eAOA,qBAAKA,UAAU,eAAf,yBACA,sBAAKA,UAAU,iBAAf,yBAA6C4B,KAC7C,sBAAK5B,UAAU,iBAAf,2BAA+CvB,KAC/C,sBAAKuB,UAAU,iBAAf,4BAAgDzB,KAChD,sBAAKyB,UAAU,iBAAf,yBAA6CrB,KAC7C,sBAAKqB,UAAU,iBAAf,2BAAsD,IAAPwB,GAAYT,QAAQ,GAAnE,kBACA,qBAAKf,UAAU,iBAAf,eACA,qBAAKA,UAAU,qBAAf,gDACA,uBACEA,UAAU,eACViB,KAAK,OACLX,MAAOuB,EACPE,YAAY,kBACZC,WAAS,EACTzB,SAAU,SAAC0B,GAAD,OAAOH,EAAcG,EAAExB,OAAOH,UAE1C,wBAAQW,KAAK,SAASC,QAAS,kBAAMS,EAAUE,IAAa7B,UAAU,gBAAtE,yBAGA,wBACEiB,KAAK,SACLC,QAASvB,EACTK,UAAU,gBAHZ,yBCpDS,MAA0B,iCJmCnCkC,G,MAAuB,IACvBC,EAAuB,GACzBC,EAAuB,EACrBC,EAA8B,GAChCC,EAA0B,IAC1BC,EAAsB,EACtBC,EAAS,EAEPC,EAA0B,GAG5BC,aAAaC,QAAQ,kBAEvBF,EAAWpD,KAAX,MAAAoD,EAAU,YAASG,KAAKC,MAAMH,aAAaC,QAAQ,oBAYrD,IASIG,EATEC,EAA4B,CAChCC,iBAAiB,EACjBC,gBAAgB,EAChBC,gBAAgB,EAChBC,gBAAgB,EAChBC,oBAAoB,EACpBC,kBAAkB,GAKdC,EAAO,IAAIC,MACf,oFA8VaC,EA3VH,WAAO,IAAD,EACc3D,mBAAkBxB,GADhC,mBACToF,EADS,KACAC,EADA,OAEoB7D,mBAAmBb,GAFvC,mBAET2E,EAFS,KAEGC,EAFH,OAGsB/D,mBAAmBkD,GAHzC,mBAGTc,EAHS,KAGIC,EAHJ,OAIkBjE,mBAEhC,UANc,mBAITkE,EAJS,KAIEC,EAJF,KAQhBC,qBAAU,WAMR,MALyB,aAArBR,EAAQjF,UACV0F,SAASC,KAAKC,iBAAiB,WAAW,SAAClE,GACzCoC,EAAkBpC,EAAMmE,OAGrB,WACLH,SAASC,KAAKG,oBAAoB,WAAW,SAACpE,GAC5CoC,EAAkBpC,EAAMmE,UAG3B,CAACZ,EAAQjF,WAGZyF,qBAAU,WACR,GAAkB,eAAdF,EAAJ,CACA3B,EAAe,EACf,IAAK,IAAIhD,EAAI,EAAGA,EAAIqE,EAAQhF,WAAYW,GAAK,EAAG,CAC9C,IAAMmF,EAAeC,KAAKC,MAAMD,KAAKE,SAAW5F,EAAU6F,QACpDC,EAAgBJ,KAAKC,MAAMD,KAAKE,SAAWjB,EAAQlF,YACzD2D,EAAS9C,GAAK,CACZH,MAAOJ,EAAW+F,GAClB1F,KAAMJ,EAAUyF,IAGpB,IAAK,IAAInF,EAAI,EAAGA,EAAIqE,EAAQlF,WAAYa,GAAK,EAC3C+C,EAAW/C,GAAKP,EAAWO,MAE5B,CAACqE,EAASM,IAGbE,qBAAU,WAEJzB,EAAS,EACXA,EAAS,GAGW,OAAlBiB,EAAQ7E,OAAgB0E,EAAKuB,OAE/B/B,EADEV,GAAgBqB,EAAQhF,WAAa,EACvBqG,YAAW,WACzBzC,EAAkBD,GAAgBE,EAClCA,EAAkB,IAClBC,EAAcwC,IACdf,EAAa,OACbF,EAAe,2BACVD,GADS,IAEZV,gBAAgB,OAED,IAAhBM,EAAQnF,OAGGwG,YAAW,WAEzBzC,GADAD,GAAgB,GACiB,GAAKE,EACtCA,EAAkB,IAClBsB,EAAc1B,EAASE,MACN,IAAhBqB,EAAQnF,UACV,CAACqF,IAEJ,IAIMoB,EAAsB,WAC1B,IAAMC,EAAa,YA1HA3C,EAAkB3B,KAAI,SAAC2D,GAC1C,IAAI/C,EAIJ,OAFKA,EADU,IAAf+C,EAAIM,OACS5F,EAASkG,QAAQZ,GACjBxF,EAAWoG,QAAQZ,GACzBxF,EAAWyC,OA0HlB,OAJmBY,EAASxB,KAAI,SAACwE,GAAD,OAAWA,EAAMjG,SACvBkG,QACxB,SAAClG,EAAOqC,GAAR,OAAkBrC,IAAU+F,EAAc1D,MAC1CqD,OACclB,EAAQhF,YA2D1B,OACE,sBAAKuB,UAAU,MAAf,UACE,iCACE,sBAAKA,UAAU,mCAAf,UACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,uCAAf,SACE,qBAAKA,UAAU,eAAf,SACE,qBAAKoF,IAAKC,EAAMC,IAAI,OAAOtF,UAAU,aAGzC,qBAAKA,UAAU,uCAAf,SACE,sBAAKA,UAAU,0CAAf,UACE,wBACEiB,KAAK,SACLjB,UAAU,kCACVkB,QAAS,kBACP4C,EAAe,2BAAKD,GAAN,IAAmBT,oBAAoB,MAJzD,yBASA,wBACEnC,KAAK,SACLjB,UAAU,gCACVkB,QAAS,kBACP4C,EAAe,2BAAKD,GAAN,IAAmBb,iBAAiB,MAJtD,yBASA,wBACE/B,KAAK,SACLD,SACgB,WAAd+C,GAAwC,eAAdA,EAE5B/D,UAAU,iCACVkB,QAAS,kBACP4C,EAAe,2BAAKD,GAAN,IAAmBZ,gBAAgB,MAPrD,8BAeLY,EAAYZ,gBACX,qBAAKjD,UAAU,aAAf,SACE,cAAC,EAAD,CACEJ,UAAW6D,EACX/D,SA1GkB,SAC9BQ,EACAqF,GAEArF,EAAMsF,iBACN9B,EAAW,CACTpF,MAAOiH,EAAOjH,MACdG,WAAY8G,EAAO9G,WACnBF,WAAYgH,EAAOhH,WACnBC,SAAU+G,EAAO/G,SACjBE,SAAU6G,EAAO7G,SACjBC,UAAW4G,EAAO5G,UAClBC,MAAO2G,EAAO3G,QAEhBkF,EAAe,2BAAKD,GAAN,IAAmBZ,gBAAgB,MA6FrCtD,YAAa,kBACXmE,EAAe,2BAAKD,GAAN,IAAmBZ,gBAAgB,UAKxDY,EAAYT,oBACX,qBAAKpD,UAAU,aAAf,SACE,cAAC,EAAD,CACEL,YAAa,kBACXmE,EAAe,2BAAKD,GAAN,IAAmBT,oBAAoB,UAK5DS,EAAYb,iBACX,qBAAKhD,UAAU,aAAf,SACE,cAAC,EAAD,CACEL,YAAa,kBACXmE,EAAe,2BAAKD,GAAN,IAAmBb,iBAAiB,MAEpD5B,OAAQqB,EACRjD,YAAaA,MAIlBqE,EAAYV,gBACX,qBAAKnD,UAAU,aAAf,SACE,cAAC,EAAD,CACEwB,OAAQe,EACRX,WAAY6B,EAAQjF,SACpBC,WAAYgF,EAAQhF,WAAWmC,WAC/BjC,UAAW8E,EAAQ9E,UACnBJ,WAAYkF,EAAQlF,WAAWqC,WAC/Be,UArGK,SAACvB,GAElBZ,EAAc,CAAEY,KADIA,GAAQ,UACOoB,OAAQe,GAC3CE,EAAWpD,KAAKG,GAChBiD,EAAWgD,MAAK,SAACC,EAAMC,GACrB,OAAID,EAAKlE,OAASmE,EAAKnE,QAAgB,EAChC,KAETkB,aAAakD,QAAQ,gBAAiB,IACtC9B,EAAe,2BACVD,GADS,IAEZV,gBAAgB,EAChBH,iBAAiB,MA0FPrD,YAAa,kBACXmE,EAAe,2BAAKD,GAAN,IAAmBV,gBAAgB,eAO7D,kCACE,sBAAKnD,UAAU,iCAAf,UACE,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACiB,WAAd+D,GACC,sBAAK/D,UAAU,gBAAf,oBACUoC,EAAe,EADzB,IAC6BqB,EAAQhF,kBAK3C,qBAAKuB,UAAU,oCAAf,SACE,wBACEiB,KAAK,SACLjB,UAAU,UACVgB,SAAwB,eAAd+C,EACV7C,QArJe,WACP,WAAd6C,GACFD,EAAe,2BACVD,GADS,IAEZX,gBAAgB,EAChBG,kBAAkB,KAEpBW,EAAa,cACbc,YAAW,WACTlB,EAAc1B,EAAS,IACvB8B,EAAa,UACbF,EAAe,2BACVD,GADS,IAEZR,kBAAkB,EAClBH,gBAAgB,OAEjB,OAEHc,EAAa,UACb6B,aAAa/C,KA8HP,SAMiB,eAAdiB,GAA4C,WAAdA,EAC3B,cACA,qBAGR,sBAAK/D,UAAU,cAAf,UACG6D,EAAYX,gBAAgC,WAAda,GAC7B,sBACE/D,UAAU,kBACVkB,QAAS,kBACP4C,EAAe,2BAAKD,GAAN,IAAmBX,gBAAgB,MAHrD,UAME,sBAAM4C,MAAO,CAAE7G,MAAO,OAAtB,eACA,sBAAM6G,MAAO,CAAE7G,MAAO,SAAtB,eACA,sBAAM6G,MAAO,CAAE7G,MAAO,UAAtB,eACA,sBAAM6G,MAAO,CAAE7G,MAAO,UAAtB,eACA,sBAAM6G,MAAO,CAAE7G,MAAO,QAAtB,eACA,sBAAM6G,MAAO,CAAE7G,MAAO,QAAtB,mBAGY,WAAd8E,GAAwC,QAAdA,KACzBF,EAAYX,gBACX,sBAAKlD,UAAU,mBAAf,UACE,sBAAM8F,MAAO,CAAE7G,MAAO,OAAtB,eACA,sBAAM6G,MAAO,CAAE7G,MAAO,SAAtB,eACA,sBAAM6G,MAAO,CAAE7G,MAAO,UAAtB,eACA,sBAAM6G,MAAO,CAAE7G,MAAO,UAAtB,eACA,sBAAM6G,MAAO,CAAE7G,MAAO,QAAtB,eACA,sBAAM6G,MAAO,CAAE7G,MAAO,QAAtB,kBAGL4E,EAAYR,kBACX,qBAAKrD,UAAU,qBAAf,gBAEa,WAAd+D,GACC,qBACE/D,UAAU,mBACV8F,MAAO,CACLC,kBAAkB,GAAD,OAAKtC,EAAQnF,MAAb,KACjB0H,wBAAyBvC,EAAQhF,cAIvC,qBAAKuB,UAAU,YAAY8F,MAAO,CAAE7G,MAAO0E,EAAW1E,OAAtD,SACiB,WAAd8E,GAA0BJ,EAAWzE,UAG1C,qBAAKc,UAAU,qBAAf,SACiB,WAAd+D,GACC,sBAAK/D,UAAU,yBAAf,UACwB,YAArByD,EAAQjF,UACP2D,EAAW8D,MAAM,EAAGxC,EAAQlF,YAAYmC,KAAI,SAACzB,GAC3C,OACE,qBACEe,UAAU,sCADZ,SAIE,wBACEA,UAAU,WACViB,KAAK,SACLC,QAAS,WAjP/BoB,EAiP8DrD,GACxC6G,MAAO,CACLI,gBACwB,SAAtBzC,EAAQ9E,UAAuBM,EAAQ,SAN7C,SASGA,EAAMkH,iBAXJtF,kBAgBS,aAArB4C,EAAQjF,UACP2D,EACG8D,MAAM,EAAGxC,EAAQlF,YACjBmC,KAAI,SAACzB,EAAOqC,GACX,OACE,qBACEtB,UAAU,sCADZ,SAIE,oBACEA,UAAU,cACV8F,MAAO,CAAEI,gBAAiBjH,GAF5B,SAIGF,EAASuC,MANPT,gCKpYhBuF,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7C,SAAS8C,eAAe,SAG1BZ,M","file":"static/js/main.830fc04b.chunk.js","sourcesContent":["/* eslint-disable react/jsx-curly-newline */\r\nimport React, { FC, useState } from 'react';\r\nimport './settings.css';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Configs, defaultConfigs } from '../../typesAndData';\r\n\r\nexport const SELECT_ROUND_COUNT: number[] = [];\r\nfor (let i = 2; i < 101; i++) {\r\n  SELECT_ROUND_COUNT.push(i);\r\n}\r\n\r\nexport const SELECT_DELAY: number[] = [];\r\nfor (let i = 1; i < 11; i++) {\r\n  SELECT_DELAY.push(i / 2);\r\n}\r\n\r\nexport const SELECT_COLOR_COUNT: number[] = [];\r\nfor (let i = 1; i < 11; i++) {\r\n  SELECT_COLOR_COUNT.push(i);\r\n}\r\n\r\ntype Props = {\r\n  onSubmit: (e: React.FormEvent<HTMLFormElement>, values: Configs) => void;\r\n  cancelClick: () => void;\r\n  nowValues: Configs;\r\n};\r\n\r\nconst Settingz: FC<Props> = ({ onSubmit, cancelClick, nowValues }) => {\r\n  const [formValues, setFormValues] = useState<Configs>(nowValues);\r\n\r\n  return (\r\n    <div className=\"settings-wrapper\">\r\n      <div className=\"settings__title\">SETTINGS</div>\r\n      <form\r\n        action=\"submit\"\r\n        onSubmit={(event) => onSubmit(event, formValues)}\r\n        className=\"settings__form\"\r\n      >\r\n        <label htmlFor=\"round-count\" className=\"settings__label\">\r\n          ROUND COUNT:\r\n          <select\r\n            className=\"settings__select\"\r\n            name=\"round-count\"\r\n            id=\"round-count\"\r\n            value={formValues.roundCount}\r\n            onChange={(event) =>\r\n              setFormValues({\r\n                ...formValues,\r\n                roundCount: parseInt(event.target.value, 10),\r\n              })\r\n            }\r\n          >\r\n            {SELECT_ROUND_COUNT.map((num) => {\r\n              return (\r\n                <option key={uuid()} value={num.toString()}>\r\n                  {num}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </label>\r\n        <label htmlFor=\"color_count\" className=\"settings__label\">\r\n          COLOR COUNT:\r\n          <select\r\n            className=\"settings__select\"\r\n            name=\"color_count\"\r\n            id=\"color_count\"\r\n            value={formValues.colorCount}\r\n            onChange={(event) =>\r\n              setFormValues({\r\n                ...formValues,\r\n                colorCount: parseInt(event.target.value, 10),\r\n              })\r\n            }\r\n          >\r\n            {SELECT_COLOR_COUNT.map((num) => {\r\n              return (\r\n                <option key={uuid()} value={num.toString()}>\r\n                  {num}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </label>\r\n        <label htmlFor=\"delay\" className=\"settings__label\">\r\n          DELAY:\r\n          <select\r\n            className=\"settings__select\"\r\n            name=\"delay\"\r\n            id=\"delay\"\r\n            value={formValues.delay}\r\n            onChange={(event) =>\r\n              setFormValues({\r\n                ...formValues,\r\n                delay: parseFloat(event.target.value),\r\n              })\r\n            }\r\n          >\r\n            {SELECT_DELAY.map((num) => {\r\n              return (\r\n                <option key={uuid()} value={num.toString()}>\r\n                  {num.toFixed(1)} s\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </label>\r\n        <label htmlFor=\"gamemode\" className=\"settings__label\">\r\n          GAME MODE:\r\n          <select\r\n            className=\"settings__select\"\r\n            name=\"gamemode\"\r\n            id=\"gamemode\"\r\n            value={formValues.gamemode}\r\n            onChange={(event) =>\r\n              setFormValues({\r\n                ...formValues,\r\n                // @ts-ignore\r\n                gamemode: event.target.value,\r\n              })\r\n            }\r\n          >\r\n            <option value=\"buttons\">Buttons</option>\r\n            <option value=\"keyboard\">Keyboard</option>\r\n          </select>\r\n        </label>\r\n        <label htmlFor=\"lang\" className=\"settings__label\">\r\n          LANGUAGE:\r\n          <select\r\n            disabled\r\n            className=\"settings__select\"\r\n            name=\"lang\"\r\n            id=\"lang\"\r\n            value={formValues.language}\r\n            onChange={(event) =>\r\n              setFormValues({\r\n                ...formValues,\r\n                // @ts-ignore\r\n                language: event.target.value,\r\n              })\r\n            }\r\n          >\r\n            <option value=\"lv\">LV</option>\r\n            <option value=\"en\">EN</option>\r\n          </select>\r\n        </label>\r\n        <label htmlFor=\"dif\" className=\"settings__label\">\r\n          DIFICULTY:\r\n          <select\r\n            className=\"settings__select\"\r\n            name=\"dif\"\r\n            id=\"dif\"\r\n            value={formValues.dificulty}\r\n            onChange={(event) =>\r\n              setFormValues({\r\n                ...formValues,\r\n                // @ts-ignore\r\n                dificulty: event.target.value,\r\n              })\r\n            }\r\n          >\r\n            <option value=\"easy\">EASY</option>\r\n            <option value=\"hard\">HARD</option>\r\n          </select>\r\n        </label>\r\n        <label htmlFor=\"sound\" className=\"settings__label\">\r\n          SOUND:\r\n          <select\r\n            className=\"settings__select\"\r\n            name=\"sound\"\r\n            id=\"sound\"\r\n            value={formValues.sound}\r\n            onChange={(event) =>\r\n              setFormValues({\r\n                ...formValues,\r\n                // @ts-ignore\r\n                sound: event.target.value,\r\n              })\r\n            }\r\n          >\r\n            <option value=\"on\">ON</option>\r\n            <option value=\"off\">OFF</option>\r\n          </select>\r\n        </label>\r\n        <button type=\"submit\" className=\"settings__button\">\r\n          OK\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={cancelClick}\r\n          className=\"settings__cancel\"\r\n        >\r\n          X\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => setFormValues(defaultConfigs)}\r\n          className=\"settings__button\"\r\n        >\r\n          Restore Defaults\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settingz;\r\n","export type Configs = {\r\n  delay: number;\r\n  colorCount: number;\r\n  gamemode: 'buttons' | 'keyboard';\r\n  roundCount: number;\r\n  language: 'en' | 'lv';\r\n  dificulty: 'easy' | 'hard';\r\n  sound: 'on' | 'off';\r\n};\r\n\r\nexport const defaultConfigs: Configs = {\r\n  delay: 2,\r\n  colorCount: 4,\r\n  gamemode: 'buttons',\r\n  roundCount: 10,\r\n  language: 'en',\r\n  dificulty: 'easy',\r\n  sound: 'off'\r\n};\r\n\r\nexport const ALL_COLORS = [\r\n  'red',\r\n  'blue',\r\n  'green',\r\n  'yellow',\r\n  'orange',\r\n  'grey',\r\n  'brown',\r\n  'purple',\r\n  'coral',\r\n  'pink',\r\n];\r\n\r\nexport const ALL_WORDS = [...ALL_COLORS];\r\n\r\nexport const ALL_KEYS = ['a', 's', 'd', 'w', 'c', '4', '5', '6', '8', '1'];\r\n\r\nexport type GameData = {\r\n  color: string;\r\n  word: string;\r\n};\r\n\r\nexport const defaultGameData = {\r\n  color: '',\r\n  word: '',\r\n};\r\n\r\n\r\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable @typescript-eslint/indent */\n/* eslint-disable react/jsx-curly-newline */\nimport React, { useState, useEffect } from 'react';\nimport { v4 as uuid } from 'uuid';\n// import soundfile from 'beep.mp3';\nimport './App.css';\nimport Settingz from './components/settings/settings';\nimport { HighScores, HighScore } from './components/highscores/highscores';\nimport { Instructions } from './components/instructions/instructions';\nimport { EndPopUp } from './components/end-pop-up/end-pop-up';\nimport logo from './logo.png';\nimport './flexbox-grid.css';\nimport {\n  Configs,\n  defaultConfigs,\n  ALL_KEYS,\n  ALL_WORDS,\n  ALL_COLORS,\n  GameData,\n  defaultGameData,\n} from './typesAndData';\n\nconst convertKeysToColors = () => {\n  const convertedArr = pressedKeysOrBtns.map((key) => {\n    let index: number;\n    key.length === 1\n      ? (index = ALL_KEYS.indexOf(key))\n      : (index = ALL_COLORS.indexOf(key));\n    return ALL_COLORS[index];\n  });\n  return convertedArr;\n};\n\nconst gameData: GameData[] = [];\nconst buttonInfo: string[] = [];\nlet roundCounter: number = 0;\nconst pressedKeysOrBtns: string[] = [];\nlet pressedKeyOrBtn: string = '-';\nlet finalResult: number = 0;\nlet helper = 0;\n\nconst highScores: HighScore[] = [];\nlet newestScore: HighScore;\n\nif (localStorage.getItem('ls-highScores')) {\n  // @ts-ignore\n  highScores.push(...JSON.parse(localStorage.getItem('ls-highScores')));\n}\n\ntype Sections = {\n  highScoresTablo: boolean;\n  settingsWindow: boolean;\n  introGifwindow: boolean;\n  endGameResults: boolean;\n  instructionsWindow: boolean;\n  preGameAnimation: boolean;\n};\n\nconst defaultSections: Sections = {\n  highScoresTablo: false,\n  settingsWindow: false,\n  introGifwindow: true,\n  endGameResults: false,\n  instructionsWindow: false,\n  preGameAnimation: false,\n};\n\nlet activeTimeOut: NodeJS.Timeout;\n\nconst beep = new Audio(\n  'https://drive.google.com/uc?id=1lEIxMjZxMy2WL0th14ZORvJaIdaAlvbK&export=download'\n);\n\nconst App = () => {\n  const [configs, setConfigs] = useState<Configs>(defaultConfigs);\n  const [wordToShow, setWordToShow] = useState<GameData>(defaultGameData);\n  const [gameSection, setGameSection] = useState<Sections>(defaultSections);\n  const [gameStage, setGameStage] = useState<\n    'before' | 'pre-active' | 'active' | 'end'\n  >('before');\n\n  useEffect(() => {\n    if (configs.gamemode === 'keyboard') {\n      document.body.addEventListener('keydown', (event) => {\n        pressedKeyOrBtn = event.key;\n      });\n    }\n    return () => {\n      document.body.removeEventListener('keydown', (event) => {\n        pressedKeyOrBtn = event.key;\n      });\n    };\n  }, [configs.gamemode]);\n\n  // Aizpilda datu masīvu, kas zīmēs spēli\n  useEffect(() => {\n    if (gameStage !== 'pre-active') return;\n    roundCounter = 0;\n    for (let i = 0; i < configs.roundCount; i += 1) {\n      const wordSelector = Math.floor(Math.random() * ALL_WORDS.length);\n      const colorSelector = Math.floor(Math.random() * configs.colorCount);\n      gameData[i] = {\n        color: ALL_COLORS[colorSelector],\n        word: ALL_WORDS[wordSelector],\n      };\n    }\n    for (let i = 0; i < configs.colorCount; i += 1) {\n      buttonInfo[i] = ALL_COLORS[i];\n    }\n  }, [configs, gameStage]);\n\n  // Nodrošina spēles loģiku un Ingame Efektus\n  useEffect(() => {\n    // Nodrošina, ka šis useEffect NEnostrādās uz MOUNT\n    if (helper < 1) {\n      helper = 1;\n      return;\n    }\n    if (configs.sound === 'on') beep.play();\n    if (roundCounter >= configs.roundCount - 1) {\n      activeTimeOut = setTimeout(() => {\n        pressedKeysOrBtns[roundCounter] = pressedKeyOrBtn;\n        pressedKeyOrBtn = '-';\n        finalResult = calculateGameResult();\n        setGameStage('end');\n        setGameSection({\n          ...gameSection,\n          endGameResults: true,\n        });\n      }, configs.delay * 1000);\n      return;\n    }\n    activeTimeOut = setTimeout(() => {\n      roundCounter += 1;\n      pressedKeysOrBtns[roundCounter - 1] = pressedKeyOrBtn;\n      pressedKeyOrBtn = '-';\n      setWordToShow(gameData[roundCounter]);\n    }, configs.delay * 1000);\n  }, [wordToShow]);\n\n  const colorButtonsClickHandler = (btnColor: string) => {\n    pressedKeyOrBtn = btnColor;\n  };\n\n  const calculateGameResult = () => {\n    const playersColors = [...convertKeysToColors()];\n    const gameColors = gameData.map((round) => round.color);\n    const succes = gameColors.filter(\n      (color, index) => color === playersColors[index]\n    ).length;\n    return succes / configs.roundCount;\n  };\n\n  const configSubmitFormHandler = (\n    event: React.FormEvent<HTMLFormElement>,\n    values: Configs\n  ) => {\n    event.preventDefault();\n    setConfigs({\n      delay: values.delay,\n      roundCount: values.roundCount,\n      colorCount: values.colorCount,\n      gamemode: values.gamemode,\n      language: values.language,\n      dificulty: values.dificulty,\n      sound: values.sound,\n    });\n    setGameSection({ ...gameSection, settingsWindow: false });\n  };\n\n  const bigBtnClickHandler = () => {\n    if (gameStage !== 'active') {\n      setGameSection({\n        ...gameSection,\n        introGifwindow: false,\n        preGameAnimation: true,\n      });\n      setGameStage('pre-active');\n      setTimeout(() => {\n        setWordToShow(gameData[0]);\n        setGameStage('active');\n        setGameSection({\n          ...gameSection,\n          preGameAnimation: false,\n          introGifwindow: false,\n        });\n      }, 2000);\n    } else {\n      setGameStage('before');\n      clearTimeout(activeTimeOut);\n    }\n  };\n\n  const saveResult = (name: string) => {\n    const checkedName = name || 'No Name';\n    newestScore = { name: checkedName, result: finalResult };\n    highScores.push(newestScore);\n    highScores.sort((prev, next) => {\n      if (prev.result > next.result) return -1;\n      return 1;\n    });\n    localStorage.setItem('ls-highScores', '');\n    setGameSection({\n      ...gameSection,\n      endGameResults: false,\n      highScoresTablo: true,\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <div className=\"container container-fluid header\">\n          <div className=\"row\">\n            <div className=\"logo-overlay\" />\n            <div className=\"col-xs-12 col-md-4 flexbox center-xs\">\n              <div className=\"logo-wrapper\">\n                <img src={logo} alt=\"LOGO\" className=\"logo\" />\n              </div>\n            </div>\n            <div className=\"col-xs-12 col-md-8 flexbox center-xs\">\n              <div className=\"header__button-wrapper end-md center-xs\">\n                <button\n                  type=\"button\"\n                  className=\"header__button howtoplay-button\"\n                  onClick={() =>\n                    setGameSection({ ...gameSection, instructionsWindow: true })\n                  }\n                >\n                  How To Play\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"header__button results-button\"\n                  onClick={() =>\n                    setGameSection({ ...gameSection, highScoresTablo: true })\n                  }\n                >\n                  High Scores\n                </button>\n                <button\n                  type=\"button\"\n                  disabled={\n                    gameStage === 'active' || gameStage === 'pre-active'\n                  }\n                  className=\"header__button settings-button\"\n                  onClick={() =>\n                    setGameSection({ ...gameSection, settingsWindow: true })\n                  }\n                >\n                  Settings\n                </button>\n              </div>\n            </div>\n          </div>\n          {gameSection.settingsWindow && (\n            <div className=\"background\">\n              <Settingz\n                nowValues={configs}\n                onSubmit={configSubmitFormHandler}\n                cancelClick={() =>\n                  setGameSection({ ...gameSection, settingsWindow: false })\n                }\n              />\n            </div>\n          )}\n          {gameSection.instructionsWindow && (\n            <div className=\"background\">\n              <Instructions\n                cancelClick={() =>\n                  setGameSection({ ...gameSection, instructionsWindow: false })\n                }\n              />\n            </div>\n          )}\n          {gameSection.highScoresTablo && (\n            <div className=\"background\">\n              <HighScores\n                cancelClick={() =>\n                  setGameSection({ ...gameSection, highScoresTablo: false })\n                }\n                scores={highScores}\n                newestScore={newestScore}\n              />\n            </div>\n          )}\n          {gameSection.endGameResults && (\n            <div className=\"background\">\n              <EndPopUp\n                result={finalResult}\n                keysOrBtns={configs.gamemode}\n                roundCount={configs.roundCount.toString()}\n                dificulty={configs.dificulty}\n                colorCount={configs.colorCount.toString()}\n                saveClick={saveResult}\n                cancelClick={() =>\n                  setGameSection({ ...gameSection, endGameResults: false })\n                }\n              />\n            </div>\n          )}\n        </div>\n      </header>\n      <section>\n        <div className=\"container container-fluid main\">\n          <div className=\"row\">\n            <div className=\"col-xs-12\">\n              {gameStage === 'active' && (\n                <div className=\"round-counter\">\n                  Round: {roundCounter + 1}/{configs.roundCount}\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"big-btn-wrapper flexbox center-xs\">\n            <button\n              type=\"button\"\n              className=\"big-btn\"\n              disabled={gameStage === 'pre-active'}\n              onClick={bigBtnClickHandler}\n            >\n              {gameStage === 'pre-active' || gameStage === 'active'\n                ? 'Cancel Game'\n                : 'Start New Game'}\n            </button>\n          </div>\n          <div className=\"game-window\">\n            {gameSection.introGifwindow && gameStage === 'before' && (\n              <div\n                className=\"intro-animation\"\n                onClick={() =>\n                  setGameSection({ ...gameSection, introGifwindow: false })\n                }\n              >\n                <span style={{ color: 'red' }}>S</span>\n                <span style={{ color: 'green' }}>T</span>\n                <span style={{ color: 'orange' }}>R</span>\n                <span style={{ color: 'yellow' }}>O</span>\n                <span style={{ color: 'blue' }}>O</span>\n                <span style={{ color: 'pink' }}>P</span>\n              </div>\n            )}\n            {(gameStage === 'before' || gameStage === 'end') &&\n              !gameSection.introGifwindow && (\n                <div className=\"game-window-logo\">\n                  <span style={{ color: 'red' }}>S</span>\n                  <span style={{ color: 'green' }}>T</span>\n                  <span style={{ color: 'orange' }}>R</span>\n                  <span style={{ color: 'yellow' }}>O</span>\n                  <span style={{ color: 'blue' }}>O</span>\n                  <span style={{ color: 'pink' }}>P</span>\n                </div>\n              )}\n            {gameSection.preGameAnimation && (\n              <div className=\"pre-game-animation\">GO</div>\n            )}\n            {gameStage === 'active' && (\n              <div\n                className=\"time-effect-line\"\n                style={{\n                  animationDuration: `${configs.delay}s`,\n                  animationIterationCount: configs.roundCount,\n                }}\n              />\n            )}\n            <div className=\"game-word\" style={{ color: wordToShow.color }}>\n              {gameStage === 'active' && wordToShow.word}\n            </div>\n          </div>\n          <div className=\"btns-keys-wrapper1\">\n            {gameStage === 'active' && (\n              <div className=\"row btns-keys-wrapper2\">\n                {configs.gamemode === 'buttons' &&\n                  buttonInfo.slice(0, configs.colorCount).map((color) => {\n                    return (\n                      <div\n                        className=\"col-xs-4 col-md-3 flexbox center-xs\"\n                        key={uuid()}\n                      >\n                        <button\n                          className=\"play-btn\"\n                          type=\"button\"\n                          onClick={() => colorButtonsClickHandler(color)}\n                          style={{\n                            backgroundColor:\n                              configs.dificulty === 'easy' ? color : 'white',\n                          }}\n                        >\n                          {color.toUpperCase()}\n                        </button>\n                      </div>\n                    );\n                  })}\n                {configs.gamemode === 'keyboard' &&\n                  buttonInfo\n                    .slice(0, configs.colorCount)\n                    .map((color, index) => {\n                      return (\n                        <div\n                          className=\"col-xs-4 col-md-3 flexbox center-xs\"\n                          key={uuid()}\n                        >\n                          <h3\n                            className=\"instruction\"\n                            style={{ backgroundColor: color }}\n                          >\n                            {ALL_KEYS[index]}\n                          </h3>\n                        </div>\n                      );\n                    })}\n              </div>\n            )}\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default App;\n","import React, { FC } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport './highscores.css';\r\n\r\nexport type HighScore = {\r\n  name: string;\r\n  result: number;\r\n};\r\n\r\ntype Props = {\r\n  cancelClick: () => void;\r\n  scores: HighScore[];\r\n  newestScore: HighScore;\r\n};\r\n\r\nexport const HighScores: FC<Props> = ({ cancelClick, scores, newestScore }) => {\r\n  return (\r\n    <div className=\"highscores-wrapper\">\r\n      <div className=\"highscores__title\">BEST RESULTS</div>\r\n      <div className=\"highscores__categories\">Place/Name/Result</div>\r\n      <button\r\n        type=\"button\"\r\n        onClick={cancelClick}\r\n        className=\"highscores__cancel\"\r\n      >\r\n        X\r\n      </button>\r\n      {scores.map((score, index: number) => {\r\n        if (index < 10) {\r\n          return (\r\n            <div\r\n              key={uuid()}\r\n              className={`highscore__line ${\r\n                score === newestScore && 'decoration'\r\n              }`}\r\n            >\r\n              {index + 1}. {score.name.substring(0, 12)}{' '}\r\n              {(score.result * 100).toFixed(2)}%\r\n            </div>\r\n          );\r\n        }\r\n        return <div key={uuid()} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC } from 'react';\r\nimport './instructions.css';\r\n\r\ntype Props = {\r\n  cancelClick: () => void;\r\n};\r\n\r\nexport const Instructions: FC<Props> = ({ cancelClick }) => {\r\n  return (\r\n    <div className=\"instructions-wrapper\">\r\n      <div className=\"instr__title\">INSTRUCTIONS</div>\r\n      <div className=\"instr__text\">Press button on screen or key on keyboard to win the game! Good Luck</div>\r\n      <button type=\"button\" onClick={cancelClick} className='instructions__cancel'>\r\n        X\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","/* eslint-disable jsx-a11y/no-autofocus */\r\nimport React, { FC, useState } from 'react';\r\nimport './end-pop-up.css';\r\n\r\ntype Props = {\r\n  cancelClick: () => void;\r\n  result: number;\r\n  keysOrBtns: string;\r\n  roundCount: string;\r\n  dificulty: string;\r\n  colorCount: string;\r\n  saveClick: (name: string) => void;\r\n};\r\n\r\nexport const EndPopUp: FC<Props> = ({\r\n  cancelClick,\r\n  saveClick,\r\n  result,\r\n  keysOrBtns,\r\n  roundCount,\r\n  dificulty,\r\n  colorCount,\r\n}) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n  return (\r\n    <div className=\"end-pop-up-wrapper\">\r\n      <button\r\n        type=\"button\"\r\n        onClick={cancelClick}\r\n        className=\"end-pop-up__cancel\"\r\n      >\r\n        X\r\n      </button>\r\n      <div className=\"popup__title\">Game Result</div>\r\n      <div className='popup__content'> Game Mode: {keysOrBtns}</div>\r\n      <div className='popup__content'> Round Count: {roundCount}</div>\r\n      <div className='popup__content'> Total Colors: {colorCount}</div>\r\n      <div className='popup__content'> Dificulty: {dificulty}</div>\r\n      <div className='popup__content'> Your scored {(result*100).toFixed(2)}%! Congrats!</div>\r\n      <div className='popup__content'> </div>\r\n      <div className='popup__input-label'>Enter Your name to save your score</div>\r\n      <input\r\n        className=\"popup__input\"\r\n        type=\"text\"\r\n        value={inputValue}\r\n        placeholder=\"Enter Your Name\"\r\n        autoFocus\r\n        onChange={(e) => setInputValue(e.target.value)}\r\n      />\r\n      <button type=\"button\" onClick={() => saveClick(inputValue)} className=\"popup__button\">\r\n        Save Result\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        onClick={cancelClick}\r\n        className=\"popup__button\"\r\n      >\r\n        Return\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/logo.a3ce597d.png\";","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}