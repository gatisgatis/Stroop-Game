{"version":3,"sources":["components/settings/settings.tsx","typesAndData.tsx","components/highscores/highscores.tsx","components/instructions/instructions.tsx","components/end-pop-up/end-pop-up.tsx","logo.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultConfigs","delay","colorCount","gamemode","roundCount","language","dificulty","sound","ALL_COLORS","ALL_WORDS","ALL_KEYS","defaultGameData","color","word","SELECT_ROUND_COUNT","i","push","SELECT_DELAY","SELECT_COLOR_COUNT","Settingz","onSubmit","cancelClick","nowValues","useState","formValues","setFormValues","className","action","event","htmlFor","name","id","value","onChange","parseInt","target","map","num","toString","uuid","parseFloat","toFixed","type","onClick","HighScores","scores","score","index","result","Instructions","EndPopUp","saveClick","keysOrBtns","inputValue","setInputValue","autoFocus","e","gameData","buttonInfo","roundCounter","pressedKeysOrBtns","pressedKeyOrBtn","finalResult","helper","highScores","localStorage","getItem","JSON","parse","activeTimeOut","defaultSections","highScoresTablo","settingsWindow","introGifwindow","endGameResults","instructionsWindow","preGameAnimation","App","configs","setConfigs","wordToShow","setWordToShow","gameSection","setGameSection","gameStage","setGameStage","useEffect","document","body","addEventListener","key","removeEventListener","console","log","wordSelector","Math","floor","random","length","colorSelector","setTimeout","calculateGameResult","playersColors","indexOf","round","filter","src","logo","alt","disabled","values","preventDefault","sort","prev","next","setItem","stringify","clearTimeout","style","animationDuration","animationIterationCount","slice","backgroundColor","toUpperCase","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.62e4850f.chunk.js","sourcesContent":["/* eslint-disable react/jsx-curly-newline */\r\nimport React, { FC, useState } from 'react';\r\nimport './settings.css';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Configs, defaultConfigs } from '../../typesAndData';\r\n\r\nexport const SELECT_ROUND_COUNT: number[] = [];\r\nfor (let i = 1; i < 101; i++) {\r\n  SELECT_ROUND_COUNT.push(i);\r\n}\r\n\r\nexport const SELECT_DELAY: number[] = [];\r\nfor (let i = 1; i < 11; i++) {\r\n  SELECT_DELAY.push(i / 2);\r\n}\r\n\r\nexport const SELECT_COLOR_COUNT: number[] = [];\r\nfor (let i = 1; i < 11; i++) {\r\n  SELECT_COLOR_COUNT.push(i);\r\n}\r\n\r\ntype Props = {\r\n  onSubmit: (e: React.FormEvent<HTMLFormElement>, values: Configs) => void;\r\n  cancelClick: () => void;\r\n  nowValues: Configs;\r\n};\r\n\r\nconst Settingz: FC<Props> = ({ onSubmit, cancelClick, nowValues }) => {\r\n  const [formValues, setFormValues] = useState<Configs>(nowValues);\r\n\r\n  return (\r\n    <div className=\"settings-wrapper\">\r\n      <form action=\"submit\" onSubmit={(event) => onSubmit(event, formValues)} className='settings__form'>\r\n        <label htmlFor=\"round-count\">\r\n          ROUND COUNT:\r\n          <select\r\n            name=\"round-count\"\r\n            id=\"round-count\"\r\n            value={formValues.roundCount}\r\n            onChange={(event) =>\r\n              setFormValues({\r\n                ...formValues,\r\n                roundCount: parseInt(event.target.value, 10),\r\n              })\r\n            }\r\n          >\r\n            {SELECT_ROUND_COUNT.map((num) => {\r\n              return (\r\n                <option key={uuid()} value={num.toString()}>\r\n                  {num}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </label>\r\n        <label htmlFor=\"color_count\">\r\n          COLOR COUNT:\r\n          <select\r\n            name=\"color_count\"\r\n            id=\"color_count\"\r\n            value={formValues.colorCount}\r\n            onChange={(event) =>\r\n              setFormValues({\r\n                ...formValues,\r\n                colorCount: parseInt(event.target.value, 10),\r\n              })\r\n            }\r\n          >\r\n            {SELECT_COLOR_COUNT.map((num) => {\r\n              return (\r\n                <option key={uuid()} value={num.toString()}>\r\n                  {num}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </label>\r\n        <label htmlFor=\"delay\">\r\n          DELAY:\r\n          <select\r\n            name=\"delay\"\r\n            id=\"delay\"\r\n            value={formValues.delay}\r\n            onChange={(event) =>\r\n              setFormValues({\r\n                ...formValues,\r\n                delay: parseFloat(event.target.value),\r\n              })\r\n            }\r\n          >\r\n            {SELECT_DELAY.map((num) => {\r\n              return (\r\n                <option key={uuid()} value={num.toString()}>\r\n                  {num.toFixed(1)} s\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </label>\r\n        <label htmlFor=\"gamemode\">\r\n          Game Mode:\r\n          <select\r\n            name=\"gamemode\"\r\n            id=\"gamemode\"\r\n            value={formValues.gamemode}\r\n            onChange={(event) =>\r\n              setFormValues({\r\n                ...formValues,\r\n                // @ts-ignore\r\n                gamemode: event.target.value,\r\n              })\r\n            }\r\n          >\r\n            <option value=\"buttons\">Buttons</option>\r\n            <option value=\"keyboard\">Keyboard</option>\r\n          </select>\r\n        </label>\r\n        <label htmlFor=\"lang\">\r\n          LANGUAGE:\r\n          <select\r\n            name=\"lang\"\r\n            id=\"lang\"\r\n            value={formValues.language}\r\n            onChange={(event) =>\r\n              setFormValues({\r\n                ...formValues,\r\n                // @ts-ignore\r\n                language: event.target.value,\r\n              })\r\n            }\r\n          >\r\n            <option value=\"lv\">LV</option>\r\n            <option value=\"en\">EN</option>\r\n          </select>\r\n        </label>\r\n        <label htmlFor=\"dif\">\r\n          DIFICULTY:\r\n          <select\r\n            name=\"dif\"\r\n            id=\"dif\"\r\n            value={formValues.dificulty}\r\n            onChange={(event) =>\r\n              setFormValues({\r\n                ...formValues,\r\n                // @ts-ignore\r\n                dificulty: event.target.value,\r\n              })\r\n            }\r\n          >\r\n            <option value=\"easy\">EASY</option>\r\n            <option value=\"hard\">HARD</option>\r\n          </select>\r\n        </label>\r\n        <label htmlFor=\"sound\">\r\n          SOUND:\r\n          <select\r\n            name=\"sound\"\r\n            id=\"sound\"\r\n            value={formValues.sound}\r\n            onChange={(event) =>\r\n              setFormValues({\r\n                ...formValues,\r\n                // @ts-ignore\r\n                sound: event.target.value,\r\n              })\r\n            }\r\n          >\r\n            <option value=\"on\">ON</option>\r\n            <option value=\"off\">OFF</option>\r\n          </select>\r\n        </label>\r\n        <button type=\"submit\">OK</button>\r\n        <button type=\"button\" onClick={cancelClick} className='settings__cancel'>\r\n          X\r\n        </button>\r\n        <button type=\"button\" onClick={() => setFormValues(defaultConfigs)}>\r\n          Restore Defaults\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settingz;\r\n","export type Configs = {\r\n  delay: number;\r\n  colorCount: number;\r\n  gamemode: 'buttons' | 'keyboard';\r\n  roundCount: number;\r\n  language: 'en' | 'lv';\r\n  dificulty: 'easy' | 'hard';\r\n  sound: 'on' | 'off';\r\n};\r\n\r\nexport const defaultConfigs: Configs = {\r\n  delay: 2,\r\n  colorCount: 4,\r\n  gamemode: 'buttons',\r\n  roundCount: 10,\r\n  language: 'en',\r\n  dificulty: 'easy',\r\n  sound: 'off'\r\n};\r\n\r\nexport const ALL_COLORS = [\r\n  'red',\r\n  'blue',\r\n  'green',\r\n  'yellow',\r\n  'orange',\r\n  'grey',\r\n  'brown',\r\n  'purple',\r\n  'coral',\r\n  'pink',\r\n];\r\n\r\nexport const ALL_WORDS = [...ALL_COLORS];\r\n\r\nexport const ALL_KEYS = ['a', 's', 'd', 'w', 'c', '4', '5', '6', '8', '1'];\r\n\r\nexport type GameData = {\r\n  color: string;\r\n  word: string;\r\n};\r\n\r\nexport const defaultGameData = {\r\n  color: '',\r\n  word: '',\r\n};\r\n\r\n\r\n","import React, { FC } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport './highscores.css';\r\n\r\nexport type HighScore = {\r\n  name: string;\r\n  result: number;\r\n};\r\n\r\ntype Props = {\r\n  cancelClick: () => void;\r\n  scores: HighScore[];\r\n};\r\n\r\nexport const HighScores: FC<Props> = ({ cancelClick, scores }) => {\r\n  return (\r\n    <div className=\"highscores-wrapper\">\r\n      HIGHSCORES\r\n      <button\r\n        type=\"button\"\r\n        onClick={cancelClick}\r\n        className=\"highscores__cancel\"\r\n      >\r\n        X\r\n      </button>\r\n      {scores.map((score, index) => {\r\n        return (\r\n          <div key={uuid()} className=\"highscore__line\">\r\n            {index + 1}. {score.name} {score.result}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC } from 'react';\r\nimport './instructions.css';\r\n\r\ntype Props = {\r\n  cancelClick: () => void;\r\n};\r\n\r\nexport const Instructions: FC<Props> = ({ cancelClick }) => {\r\n  return (\r\n    <div className=\"instructions-wrapper\">\r\n      INSTRUKCIJAS\r\n      <button type=\"button\" onClick={cancelClick} className='instructions__cancel'>\r\n        X\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","/* eslint-disable jsx-a11y/no-autofocus */\r\nimport React, { FC, useState } from 'react';\r\nimport './end-pop-up.css';\r\n\r\ntype Props = {\r\n  cancelClick: () => void;\r\n  result: number;\r\n  keysOrBtns: string;\r\n  roundCount: string;\r\n  dificulty: string;\r\n  colorCount: string;\r\n  saveClick: (name: string) => void;\r\n};\r\n\r\nexport const EndPopUp: FC<Props> = ({\r\n  cancelClick,\r\n  saveClick,\r\n  result,\r\n  keysOrBtns,\r\n  roundCount,\r\n  dificulty,\r\n  colorCount,\r\n}) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n  return (\r\n    <div className=\"end-pop-up-wrapper\">\r\n      <button\r\n        type=\"button\"\r\n        onClick={cancelClick}\r\n        className=\"end-pop-up__cancel\"\r\n      >\r\n        X\r\n      </button>\r\n      <div className=\"popup__title\">Game Result</div>\r\n      <div className='popup__content'> Game Mode: {keysOrBtns}</div>\r\n      <div className='popup__content'> Round Count: {roundCount}</div>\r\n      <div className='popup__content'> Total Colors: {colorCount}</div>\r\n      <div className='popup__content'> Dificulty: {dificulty}</div>\r\n      <div className='popup__content'> Your scored {result}%! Congrats!</div>\r\n      <div className='popup__content'> </div>\r\n      <div className='popup__input-label'>Enter Your name to save your score</div>\r\n      <input\r\n        className=\"popup__input\"\r\n        type=\"text\"\r\n        value={inputValue}\r\n        autoFocus\r\n        onChange={(e) => setInputValue(e.target.value)}\r\n      />\r\n      <button type=\"button\" onClick={() => saveClick(inputValue)} className=\"popup__button\">\r\n        Save Result\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        onClick={cancelClick}\r\n        className=\"popup__button\"\r\n      >\r\n        Return\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/logo.a3ce597d.png\";","/* eslint-disable @typescript-eslint/indent */\n/* eslint-disable react/jsx-curly-newline */\nimport React, { useState, useEffect, useRef } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport './App.css';\nimport Settingz from './components/settings/settings';\nimport { HighScores, HighScore } from './components/highscores/highscores';\nimport { Instructions } from './components/instructions/instructions';\nimport { EndPopUp } from './components/end-pop-up/end-pop-up';\nimport logo from './logo.png';\nimport './flexbox-grid.css';\nimport {\n  Configs,\n  defaultConfigs,\n  ALL_KEYS,\n  ALL_WORDS,\n  ALL_COLORS,\n  GameData,\n  defaultGameData,\n} from './typesAndData';\n\nconst convertKeysToColors = () => {\n  const convertedArr = pressedKeysOrBtns.map((key) => {\n    let index: number;\n    key.length === 1\n      ? (index = ALL_KEYS.indexOf(key))\n      : (index = ALL_COLORS.indexOf(key));\n    return ALL_COLORS[index];\n  });\n  return convertedArr;\n};\n\nconst gameData: GameData[] = [];\nconst buttonInfo: string[] = [];\nlet roundCounter: number = 0;\nconst pressedKeysOrBtns: string[] = [];\nlet pressedKeyOrBtn: string = '-';\nlet finalResult: number = 0;\nlet helper = 0;\n\nconst highScores: HighScore[] = [];\n\nif (localStorage.getItem('ls-highScores')) {\n  // @ts-ignore\n  highScores.push(...JSON.parse(localStorage.getItem('ls-highScores')));\n}\n\ntype Sections = {\n  highScoresTablo: boolean;\n  settingsWindow: boolean;\n  introGifwindow: boolean;\n  endGameResults: boolean;\n  instructionsWindow: boolean;\n  preGameAnimation: boolean;\n};\n\nconst defaultSections: Sections = {\n  highScoresTablo: false,\n  settingsWindow: false,\n  introGifwindow: true,\n  endGameResults: false,\n  instructionsWindow: false,\n  preGameAnimation: false,\n};\n\nlet activeTimeOut: NodeJS.Timeout;\n\nconst App = () => {\n  const [configs, setConfigs] = useState<Configs>(defaultConfigs);\n  const [wordToShow, setWordToShow] = useState<GameData>(defaultGameData);\n  const [gameSection, setGameSection] = useState<Sections>(defaultSections);\n  const [gameStage, setGameStage] = useState<\n    'before' | 'pre-active' | 'active' | 'end'\n  >('before');\n\n  // const afterRoundAnimationHandler = () => {\n  //   pressedKeyOrBtn === gameData[roundCounter - 1].color ||\n  //   pressedKeyOrBtn ===\n  //     ALL_KEYS[ALL_COLORS.indexOf(gameData[roundCounter - 1].color)]\n  //     ? (roundEffectInfo = 'Perfect!')\n  //     : (roundEffectInfo = 'Fail!');\n  //   setRoundEffect(true);\n  //   setTimeout(() => {\n  //     setRoundEffect(false);\n  //   }, 500);\n  // };\n\n  useEffect(() => {\n    if (configs.gamemode === 'keyboard') {\n      document.body.addEventListener('keydown', (event) => {\n        pressedKeyOrBtn = event.key;\n      });\n    }\n    return () => {\n      document.body.removeEventListener('keydown', (event) => {\n        pressedKeyOrBtn = event.key;\n      });\n    };\n  }, [configs.gamemode]);\n\n  // Aizpilda datu masīvu, kas zīmēs spēli\n  useEffect(() => {\n    console.log(configs);\n    if (gameStage !== 'pre-active') return;\n    roundCounter = 0;\n    for (let i = 0; i < configs.roundCount; i += 1) {\n      const wordSelector = Math.floor(Math.random() * ALL_WORDS.length);\n      const colorSelector = Math.floor(Math.random() * configs.colorCount);\n      gameData[i] = {\n        color: ALL_COLORS[colorSelector],\n        word: ALL_WORDS[wordSelector],\n      };\n    }\n    for (let i = 0; i < configs.colorCount; i += 1) {\n      buttonInfo[i] = ALL_COLORS[i];\n    }\n  }, [configs, gameStage]);\n\n  // Nodrošina spēles loģiku un Ingame Efektus\n  useEffect(() => {\n    // Nodrošina, ka šis useEffect NEnostrādās divas reizes uz MOUNT\n    if (helper < 1) {\n      helper = 1;\n      return;\n    }\n    if (roundCounter >= configs.roundCount - 1) {\n      activeTimeOut = setTimeout(() => {\n        pressedKeysOrBtns[roundCounter] = pressedKeyOrBtn;\n        pressedKeyOrBtn = '-';\n        console.log(pressedKeyOrBtn, pressedKeysOrBtns, gameData, buttonInfo);\n        finalResult = calculateGameResult();\n        setGameStage('end');\n        setGameSection({\n          ...gameSection,\n          endGameResults: true,\n        });\n      }, configs.delay * 1000);\n      return;\n    }\n    activeTimeOut = setTimeout(() => {\n      roundCounter += 1;\n      pressedKeysOrBtns[roundCounter - 1] = pressedKeyOrBtn;\n      pressedKeyOrBtn = '-';\n      setWordToShow(gameData[roundCounter]);\n    }, configs.delay * 1000);\n  }, [wordToShow]);\n\n  const colorButtonsClickHandler = (btnColor: string) => {\n    pressedKeyOrBtn = btnColor;\n  };\n\n  const calculateGameResult = () => {\n    const playersColors = [...convertKeysToColors()];\n    const gameColors = gameData.map((round) => round.color);\n    const succes = gameColors.filter(\n      (color, index) => color === playersColors[index]\n    ).length;\n    return succes / configs.roundCount;\n  };\n\n  const configSubmitFormHandler = (\n    event: React.FormEvent<HTMLFormElement>,\n    values: Configs\n  ) => {\n    event.preventDefault();\n    setConfigs({\n      delay: values.delay,\n      roundCount: values.roundCount,\n      colorCount: values.colorCount,\n      gamemode: values.gamemode,\n      language: values.language,\n      dificulty: values.dificulty,\n      sound: values.sound,\n    });\n    setGameSection({ ...gameSection, settingsWindow: false });\n  };\n\n  const bigBtnClickHandler = () => {\n    if (gameStage !== 'active') {\n      // Sākas animācija neliela\n      setGameSection({\n        ...gameSection,\n        introGifwindow: false,\n        preGameAnimation: true,\n      });\n      setGameStage('pre-active');\n      setTimeout(() => {\n        setWordToShow(gameData[0]);\n        setGameStage('active');\n        setGameSection({ ...gameSection, preGameAnimation: false });\n      }, 2000);\n    } else {\n      setGameStage('before');\n      clearTimeout(activeTimeOut);\n    }\n  };\n\n  const saveResult = (name: string) => {\n    highScores.push({ name, result: finalResult });\n    highScores.sort((prev, next) => {\n      if (prev.result > next.result) return -1;\n      return 1;\n    });\n    localStorage.setItem('ls-highScores', JSON.stringify(highScores));\n    setGameSection({ ...gameSection, endGameResults: false });\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <div className=\"container container-fluid header\">\n          <div className=\"row\">\n            <div className=\"logo-overlay\" />\n            <div className=\"col-xs-12 col-md-4 flexbox center-xs\">\n              <div className=\"logo-wrapper\">\n                <img src={logo} alt=\"LOGO\" className=\"logo\" />\n              </div>\n            </div>\n            <div className=\"col-xs-12 col-md-8 flexbox center-xs end-md\">\n              <div className=\"header__button-wrapper\">\n                <button\n                  type=\"button\"\n                  className=\"header__button howtoplay-button\"\n                  onClick={() =>\n                    setGameSection({ ...gameSection, instructionsWindow: true })\n                  }\n                >\n                  How To Play\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"header__button results-button\"\n                  onClick={() =>\n                    setGameSection({ ...gameSection, highScoresTablo: true })\n                  }\n                >\n                  High Scores\n                </button>\n                <button\n                  type=\"button\"\n                  disabled={\n                    gameStage === 'active' || gameStage === 'pre-active'\n                  }\n                  className=\"header__button settings-button\"\n                  onClick={() =>\n                    setGameSection({ ...gameSection, settingsWindow: true })\n                  }\n                >\n                  Settings\n                </button>\n              </div>\n            </div>\n          </div>\n          {gameSection.settingsWindow && (\n            <div className=\"background\">\n              <Settingz\n                nowValues={configs}\n                onSubmit={configSubmitFormHandler}\n                cancelClick={() =>\n                  setGameSection({ ...gameSection, settingsWindow: false })\n                }\n              />\n            </div>\n          )}\n          {gameSection.instructionsWindow && (\n            <div className=\"background\">\n              <Instructions\n                cancelClick={() =>\n                  setGameSection({ ...gameSection, instructionsWindow: false })\n                }\n              />\n            </div>\n          )}\n          {gameSection.highScoresTablo && (\n            <div className=\"background\">\n              <HighScores\n                cancelClick={() =>\n                  setGameSection({ ...gameSection, highScoresTablo: false })\n                }\n                scores={highScores}\n              />\n            </div>\n          )}\n          {gameSection.endGameResults && (\n            <div className=\"background\">\n              <EndPopUp\n                result={finalResult}\n                keysOrBtns={configs.gamemode}\n                roundCount={configs.roundCount.toString()}\n                dificulty={configs.dificulty}\n                colorCount={configs.colorCount.toString()}\n                saveClick={saveResult}\n                cancelClick={() =>\n                  setGameSection({ ...gameSection, endGameResults: false })\n                }\n              />\n            </div>\n          )}\n        </div>\n      </header>\n      <section>\n        <div className=\"container container-fluid main\">\n          <div className=\"row\">\n            <div className=\"col-xs-12\">\n              {gameStage === 'active' && (\n                <div className=\"round-counter\">\n                  Round: {roundCounter + 1}/{configs.roundCount}\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"big-btn-wrapper flexbox center-xs\">\n            <button\n              type=\"button\"\n              className=\"big-btn\"\n              onClick={bigBtnClickHandler}\n            >\n              {gameStage === 'pre-active' || gameStage === 'active'\n                ? 'Cancel Game'\n                : 'Start New Game'}\n            </button>\n          </div>\n          <div className=\"game-window\">\n            {gameSection.preGameAnimation && (\n              <div className=\"pre-game-animation\">GO</div>\n            )}\n            {gameStage === 'active' && (\n              <div\n                className=\"time-effect-line\"\n                style={{\n                  animationDuration: `${configs.delay}s`,\n                  animationIterationCount: configs.roundCount,\n                }}\n              />\n            )}\n            <div className=\"game-word\" style={{ color: wordToShow.color }}>\n              {gameStage === 'active' && wordToShow.word}\n            </div>\n          </div>\n          <div className=\"btns-keys-wrapper1\">\n            {gameStage === 'active' && (\n              <div className=\"row btns-keys-wrapper2\">\n                {configs.gamemode === 'buttons' &&\n                  buttonInfo.slice(0, configs.colorCount).map((color) => {\n                    return (\n                      <div\n                        className=\"col-xs-4 col-md-3 flexbox center-xs\"\n                        key={uuid()}\n                      >\n                        <button\n                          className=\"play-btn\"\n                          type=\"button\"\n                          onClick={() => colorButtonsClickHandler(color)}\n                          style={{ backgroundColor: color }}\n                        >\n                          {color.toUpperCase()}\n                        </button>\n                      </div>\n                    );\n                  })}\n                {configs.gamemode === 'keyboard' &&\n                  buttonInfo\n                    .slice(0, configs.colorCount)\n                    .map((color, index) => {\n                      return (\n                        <div\n                          className=\"col-xs-4 col-md-3 flexbox center-xs\"\n                          key={uuid()}\n                        >\n                          <h3\n                            className=\"instruction\"\n                            style={{ backgroundColor: color }}\n                          >\n                            {ALL_KEYS[index]}\n                          </h3>\n                        </div>\n                      );\n                    })}\n              </div>\n            )}\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}